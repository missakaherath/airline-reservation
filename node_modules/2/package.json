{
  "_args": [
    [
      {
        "raw": "2@^1.0.2",
        "scope": null,
        "escapedName": "2",
        "name": "2",
        "rawSpec": "^1.0.2",
        "spec": ">=1.0.2 <2.0.0",
        "type": "range"
      },
      "E:\\sem4my\\node\\airline mvc\\node_modules\\3"
    ]
  ],
  "_from": "2@>=1.0.2 <2.0.0",
  "_id": "2@1.0.2",
  "_inCache": true,
  "_location": "/2",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/2-1.0.2.tgz_1512826394073_0.9395606960169971"
  },
  "_npmUser": {
    "name": "lamansky",
    "email": "johnlamansky@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "2@^1.0.2",
    "scope": null,
    "escapedName": "2",
    "name": "2",
    "rawSpec": "^1.0.2",
    "spec": ">=1.0.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/3",
    "/enforce-range"
  ],
  "_resolved": "https://registry.npmjs.org/2/-/2-1.0.2.tgz",
  "_shasum": "356a6f50b4851a311547570c616c6e8ef4b464c1",
  "_shrinkwrap": null,
  "_spec": "2@^1.0.2",
  "_where": "E:\\sem4my\\node\\airline mvc\\node_modules\\3",
  "author": {
    "name": "John Lamansky"
  },
  "bugs": {
    "url": "https://github.com/lamansky/2/issues"
  },
  "dependencies": {},
  "description": "The Type Conversion Library. Numbers, Strings, Arrays, Maps, Objects, and Iterators.",
  "devDependencies": {
    "eslint-config-lamansky": "^1.0.0",
    "mocha": "^3.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "356a6f50b4851a311547570c616c6e8ef4b464c1",
    "tarball": "https://registry.npmjs.org/2/-/2-1.0.2.tgz"
  },
  "engines": {
    "node": ">=7.0.0"
  },
  "eslintConfig": {
    "extends": "lamansky",
    "env": {
      "mocha": true
    }
  },
  "gitHead": "2baf0a794846d12a7dd751fd518499e9cead0a0c",
  "homepage": "https://github.com/lamansky/2",
  "keywords": [
    "type",
    "convert",
    "conversion",
    "to",
    "array",
    "iterator",
    "map",
    "number",
    "int",
    "integer",
    "float",
    "object",
    "string"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "lamansky",
      "email": "johnlamansky@gmail.com"
    }
  ],
  "name": "2",
  "optionalDependencies": {},
  "readme": "# “2”: The Type Conversion Library\n\nA [Node.js](https://nodejs.org/) module for converting between various JavaScript types: arrays, iterators, maps, numbers, objects, and strings.\n\n```javascript\nconst {toArray, toIterator, toMap, toNumber, toObject, toString} = require('2')\n\nlet data = {a: 1, b: 2}\ndata = toMap(data)\ndata = toArray(data)\ndata = toObject(data)\ndata = toIterator(data)\ndata = toArray(data)\ndata = toMap(data)\ndata = toObject(data) // {a: 1, b: 2}\n\ndata = '1.23'\ndata = toNumber(data)\ndata = toString(data) // '1.23'\n```\n\n## Installation\n\n```bash\nnpm install 2 --save\n```\n\n## Usage\n\n### Requiring the Functions\n\nYou can require needed functions via a destructuring assignment:\n\n```javascript\nconst {toArray, toIterator, toMap, toNumber, toObject, toString} = require('2')\n```\n\nOr you can require individual functions via submodules:\n\n```javascript\nconst toArray = require('2/array')\nconst toIterator = require('2/iterator')\nconst toMap = require('2/map')\nconst toNumber = require('2/number')\nconst toObject = require('2/object')\nconst toString = require('2/string')\n```\n\n### Converting to Arrays\n```javascript\nconst toArray = require('2/array')\n\n// Map => Array\nlet map = new Map()\nmap.set('a', 1)\nmap.set('b', 2)\ntoArray(map) // [['a', 1], ['b', 2]]\n\n// Iterator => Array\ntoArray(map.values()) // [1, 2]\n\n// Object => Array\ntoArray({a: 1, b: 2}) // [['a', 1], ['b', 2]]\n\n// Array-like object => Array\ntoArray({0: 'first', 1: 'second'}, {detectIndexKeys: true}) // ['first', 'second']\n\n// Primitive value => Array\ntoArray('test') // ['test']\n```\n\n### Converting to Iterators\n```javascript\nconst toIterator = require('2/iterator')\n\n// Object => Iterator\nlet iterator = toIterator({a: 1, b: 2})\niterator.next().value // ['a', 1]\niterator.next().value // ['b', 2]\niterator.next().done // true\n\n// Primitive value => Iterator\ntoIterator('test').next().value // 'test'\n```\n\n### Converting to Maps\n```javascript\nconst toMap = require('2/map')\n\n// Array of key/value pairs => Map\ntoMap([['a', 1], ['b', 2]])\nmap.get('a') // 1\nmap.get('b') // 2\n\n// Array of values => Map\nlet map = toMap(['a', 'b'])\nmap.get(0) // 'a'\nmap.get(1) // 'b'\n\n// Object => Map\nmap = toMap({a: 1, b: 2})\nmap.get('a') // 1\nmap.get('b') // 2\n```\n\n### Converting to Numbers\n```javascript\nconst toNumber = require('2/number')\n\ntoNumber('1.2') // 1.2\ntoNumber(Infinity) // 0\ntoNumber(NaN) // 0\ntoNumber('not a number') // 0\n\n// Can specify a fallback other than zero:\ntoNumber('not a number', {fallback: 100}) // 100\n\n// You can choose to throw an error for invalid inputs by\n// providing a null fallback:\ntoNumber('not a number', {fallback: null}) // throws error\n\n// Option to round floats:\ntoNumber('4.7') // 4.7\ntoNumber('4.7', {round: true}) // 5\n\n// By default, Infinity is not considered a valid number,\n// but this can be changed:\ntoNumber(Infinity) // 0\ntoNumber(Infinity, {finite: false}) // Infinity\n\n// Number object => Number\nlet numberObject = new Number(123)\ntypeof numberObject // 'object'\ntypeof toNumber(numberObject) // 'number'\n```\n\n### Converting to Objects\n```javascript\nconst toObject = require('2/object')\n\n// Array of key/value pairs => Object\nlet obj = toObject([['a', 1], ['b', 2]])\nobj.a // 1\nobj.b // 2\n\n// Array => Object\nlet obj = toObject(['first', 'second'])\nObject.keys(obj).length // 2\nobj[0] // 'first'\nobj[1] // 'second'\n\n// In the above example, the array indices become the object keys.\n// But you can make the keys mirror the values instead:\nlet obj = toObject(['first', 'second'], {mirror: true})\nObject.keys(obj).length // 2\nobj.first // 'first'\nobj.second // 'second'\n\n// Map => Object\nlet map = new Map()\nmap.set('key1', 'value1')\nmap.set('key2', 'value2')\nlet obj = toObject(map)\nobj.key1 // 'value1'\nobj.key2 // 'value2'\n```\n\n### Converting to Strings\n```javascript\nconst toString = require('2/string')\n\ntoString(123) // '123'\ntoString(-0) // '0'\n\ntoString(true) // ''\ntoString(false) // ''\ntoString(undefined) // ''\ntoString(null) // ''\ntoString(Infinity) // ''\ntoString(NaN) // ''\ntoString({}) // ''\ntoString([]) // ''\ntoString(function () {}) // ''\ntoString(Symbol('test')) // ''\n\n// Compare the above to standard JavaScript string conversion:\nString(true) // 'true'\nString(false) // 'false'\nString(undefined) // 'undefined'\nString(null) // 'null'\nString(Infinity) // 'Infinity'\nString(NaN) // 'NaN'\nString({}) // '[object Object]'\nString([]) // ''\nString(function () {}) // 'function () {}'\nString(Symbol('test')) // 'Symbol(test)'\n\n// Default fallback is an empty string, but you can change it:\ntoString(undefined) // ''\ntoString(undefined, {fallback: 'N/A'}) // 'N/A'\n\n// You can choose to throw an error for invalid inputs by\n// providing a null fallback:\ntoString(undefined, {fallback: null}) // throws error\n\n// String object => String\nlet stringObject = new String('test')\ntypeof stringObject // 'object'\ntypeof toString(stringObject) // 'string'\n```\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lamansky/2.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "1.0.2"
}
